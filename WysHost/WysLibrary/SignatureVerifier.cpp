/**
***
*** Copyright  (C) 2014-2017 Intel Corporation. All rights reserved.
***
*** The information and source code contained herein is the exclusive
*** property of Intel Corporation. and may not be disclosed, examined
*** or reproduced in whole or in part without explicit written authorization
*** from the company.
***
*** ----------------------------------------------------------------------------
**/
#include <tchar.h>
#include <windows.h>
#include <Softpub.h>
#include <string>
using namespace std;
#ifdef AMULET
#define CERT_CN_SIZE 147
BYTE m_CNData [CERT_CN_SIZE] = {
	0x30, 0x81, 0x90, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0b, 0x49, 0x6e,
	0x74, 0x65, 0x6c, 0x20, 0x43, 0x6f, 0x72, 0x70, 0x2e, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x03, 0x55,
	0x04, 0x0b, 0x13, 0x17, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x34, 0x30, 0x32, 0x06,
	0x03, 0x55, 0x04, 0x03, 0x13, 0x2b, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 0x43, 0x6f, 0x72, 0x70,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x31, 0x20, 0x30, 0x1e, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x09, 0x01,
	0x16, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x40, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x2e,
	0x63, 0x6f, 0x6d
};
#else
#define CERT_CN_SIZE 190
BYTE m_CNData [CERT_CN_SIZE] = {
	0x30, 0x81, 0xbb, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13, 0x30, 0x11,
	0x06, 0x03, 0x55, 0x04, 0x08, 0x13, 0x0a, 0x43, 0x61, 0x6c, 0x69, 0x66, 0x6f, 0x72, 0x6e, 0x69, 0x61, 0x31, 0x0f, 0x30,
	0x0d, 0x06, 0x03, 0x55, 0x04, 0x07, 0x13, 0x06, 0x46, 0x6f, 0x6c, 0x73, 0x6f, 0x6d, 0x31, 0x1a, 0x30, 0x18, 0x06, 0x03,
	0x55, 0x04, 0x0a, 0x14, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x31, 0x3e, 0x30, 0x3c, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x35, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c,
	0x20, 0x49, 0x44, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x33, 0x20, 0x2d, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x76, 0x32, 0x31, 0x0e, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x14, 0x05, 0x49, 0x53, 0x57,
	0x51, 0x4c, 0x31, 0x1a, 0x30, 0x18, 0x06, 0x03, 0x55, 0x04, 0x03, 0x14, 0x11, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 0x43,
	0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e
};
#define CERT_CN_SIZE_2 131
BYTE m_CNData_2 [CERT_CN_SIZE_2] = {
0x30, 0x81, 0x80, 0x31, 0x1a, 0x30, 0x18, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x11, 0x49, 0x6e, 0x74,
0x65, 0x6c, 0x20, 0x43, 0x6f, 0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x21, 0x30,
0x1f, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 0x41, 0x72, 0x63,
0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x31, 0x3f,
0x30, 0x3d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x36, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x20, 0x43, 0x6f,
0x72, 0x70, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2d, 0x20, 0x49, 0x6e, 0x74, 0x65, 0x6c,
0xc2, 0xae, 0x20, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x45, 0x6e, 0x67,
0x69, 0x6e, 0x65, 0x20, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65
};

#define CERT_CN_SIZE_3 149
BYTE m_CNData_3 [CERT_CN_SIZE_3] = {
0x30 ,0x81 ,0x92 ,0x31 ,0x0b ,0x30 ,0x09 ,0x06 ,0x03 ,0x55 ,0x04 ,0x06 ,0x13 ,0x02 ,0x55 ,0x53 ,
0x31 ,0x0b ,0x30 ,0x09 ,0x06 ,0x03, 0x55 ,0x04 ,0x08 ,0x13 ,0x02 ,0x43 ,0x41 ,0x31 ,0x14 ,0x30 ,
0x12 ,0x06 ,0x03 ,0x55 ,0x04 ,0x07 ,0x13 ,0x0b ,0x53 ,0x61 ,0x6e ,0x74, 0x61 ,0x20 ,0x43 ,0x6c ,
0x61 ,0x72 ,0x61 ,0x31 ,0x1a ,0x30 ,0x18 ,0x06 ,0x03 ,0x55 ,0x04 ,0x0a ,0x13 ,0x11 ,0x49 ,
0x6e ,0x74, 0x65 ,0x6c ,0x20 ,0x43 ,0x6f ,0x72 ,0x70 ,0x6f ,0x72 ,0x61 ,0x74 ,0x69 ,0x6f ,0x6e ,
0x31 ,0x44 ,0x30 ,0x42 ,0x06 ,0x03 ,0x55 ,0x04, 0x03 ,0x13 ,0x3b ,0x49 ,0x6e ,0x74 ,0x65 ,0x6c ,
0x20 ,0x43 ,0x6f ,0x72 ,0x70 ,0x6f ,0x72 ,0x61 ,0x74 ,0x69 ,0x6f ,0x6e ,0x20 ,0x2d, 0x20 ,0x45 ,
0x6d ,0x62 ,0x65 ,0x64 ,0x64 ,0x65 ,0x64 ,0x20 ,0x53 ,0x75 ,0x62 ,0x73 ,0x79 ,0x73 ,0x74 ,0x65 ,
0x6d ,0x73 ,0x20 ,0x61, 0x6e ,0x64 ,0x20 ,0x49 ,0x50 ,0x20 ,0x42 ,0x6c ,0x6f ,0x63 ,0x6b ,0x73 ,
0x20 ,0x47 ,0x72 ,0x6f ,0x75 ,0x70 
};

#define CERT_CN_SIZE_4 152
BYTE m_CNData_4[CERT_CN_SIZE_4] = {
0x30 , 0x81 , 0x95 , 0x31 , 0x0b , 0x30 , 0x09 , 0x06 , 0x03 , 0x55 , 0x04 , 0x06 , 0x13 , 0x02 , 0x55,
0x53,  0x31 , 0x0b , 0x30 , 0x09 , 0x06 , 0x03 , 0x55 , 0x04 , 0x08 , 0x13 , 0x02 , 0x43 , 0x41 , 0x31,
0x14 , 0x30 , 0x12 , 0x06 , 0x03 , 0x55 , 0x04 , 0x07 , 0x13 , 0x0b , 0x53 , 0x61 , 0x6e , 0x74 , 0x61,
0x20 , 0x43 , 0x6c , 0x61 , 0x72 , 0x61 , 0x31 ,
0x1a , 0x30 , 0x18 , 0x06 , 0x03 , 0x55 , 0x04 , 0x0a , 0x13 , 0x11 , 0x49 , 0x6e , 0x74 , 0x65	, 0x6c ,
0x20 , 0x43 , 0x6f , 0x72 , 0x70 , 0x6f , 0x72 , 0x61 , 0x74 , 0x69 , 0x6f , 0x6e , 0x31 , 0x0c , 0x30 ,
0x0a , 0x06 , 0x03 , 0x55 , 0x04 , 0x0b , 0x13 , 0x03 , 0x45 , 0x49 , 0x47 , 0x31 , 0x39 , 0x30 , 0x37 ,
0x06 , 0x03 , 0x55 , 0x04 , 0x03 , 0x13 , 0x30 , 0x49 , 0x6e , 0x74 , 0x65 , 0x6c , 0x28 , 0x52 , 0x29 ,
0x20 , 0x45 , 0x6d , 0x62 , 0x65 , 0x64	, 0x64 , 0x65 , 0x64 , 0x20 , 0x53 , 0x75 , 0x62 , 0x73 , 0x79 ,
0x73 , 0x74 , 0x65 , 0x6d , 0x73 , 0x20 , 0x61 , 0x6e , 0x64 , 0x20 , 0x49 , 0x50 , 0x20 , 0x42 , 0x6c ,
0x6f , 0x63 , 0x6b , 0x73 , 0x20 , 0x47 , 0x72 , 0x6f , 0x75 , 0x70 };

#endif

void InitWinTrust(WINTRUST_DATA &WinTrustData, WINTRUST_FILE_INFO &FileData, const std::wstring &filePath)
{
	// Initialize the WINTRUST_FILE_INFO structure.
	memset(&FileData, 0, sizeof(FileData));
    FileData.cbStruct = sizeof(WINTRUST_FILE_INFO);
    FileData.pcwszFilePath = filePath.c_str();
    FileData.hFile = NULL;
    FileData.pgKnownSubject = NULL;

	// Initialize the WinVerifyTrust input data structure.

    // Default all fields to 0.
    memset(&WinTrustData, 0, sizeof(WinTrustData));

    WinTrustData.cbStruct = sizeof(WinTrustData);
    
    // Use default code signing EKU.
    WinTrustData.pPolicyCallbackData = NULL;

    // No data to pass to SIP.
    WinTrustData.pSIPClientData = NULL;

    // Disable WVT UI.
    WinTrustData.dwUIChoice = WTD_UI_NONE;

    // No revocation checking.
    WinTrustData.fdwRevocationChecks = WTD_REVOKE_NONE; 

    // Verify an embedded signature on a file.
    WinTrustData.dwUnionChoice = WTD_CHOICE_FILE;

    // Default verification.
	WinTrustData.dwStateAction = WTD_STATEACTION_IGNORE;

    // Not applicable for default verification of embedded signature.
    WinTrustData.hWVTStateData = NULL;

    // Not used.
    WinTrustData.pwszURLReference = NULL;

    // WTD_CACHE_ONLY_URL_RETRIEVAL not supported in XP
    //WinTrustData.dwProvFlags = WTD_CACHE_ONLY_URL_RETRIEVAL | WTD_SAFER_FLAG;

    // This is not applicable if there is no UI because it changes 
    // the UI to accommodate running applications instead of installing applications.
	WinTrustData.dwUIContext = WTD_UICONTEXT_EXECUTE;

    // Set pFile.
    WinTrustData.pFile = &FileData;
}

/*
* Verify the file signature.
* Arguments: 		filePath - file to verify
* Return values:	true on success, false on failure
*/
bool VerifyFileSignature(const std::wstring &filePath)
{
	LONG lStatus;
    DWORD dwLastError;

    /*
    WVTPolicyGUID specifies the policy to apply on the file
    WINTRUST_ACTION_GENERIC_VERIFY_V2 policy checks:
    
    1) The certificate used to sign the file chains up to a root 
    certificate located in the trusted root certificate store. This 
    implies that the identity of the publisher has been verified by 
    a certification authority.
    
    2) In cases where user interface is displayed (which this example
    does not do), WinVerifyTrust will check for whether the  
    end entity certificate is stored in the trusted publisher store,  
    implying that the user trusts content from this publisher.
    
    3) The end entity certificate has sufficient permission to sign 
    code, as indicated by the presence of a code signing EKU or no 
    EKU.
    */

    GUID WVTPolicyGUID = WINTRUST_ACTION_GENERIC_VERIFY_V2; 
	WINTRUST_FILE_INFO FileData;
    WINTRUST_DATA WinTrustData;
	InitWinTrust(WinTrustData, FileData, filePath);

    
    // WinVerifyTrust verifies signatures as specified by the GUID and Wintrust_Data.
    lStatus = WinVerifyTrust(NULL, &WVTPolicyGUID, &WinTrustData);

 	if(lStatus != ERROR_SUCCESS)
		return false;
	return true;
}


/*
 * Verifies that Certificate of given file was signed by Intel
 */
bool VerifyCertificateName(const std::wstring &filePath)
{
	bool ret = false;
	HCERTSTORE hCertStore = 0;
	HCRYPTMSG hMsg = 0;
	PCMSG_SIGNER_INFO pSignerInfo = NULL;
	PCCERT_CONTEXT pCertContext = NULL;
	do
	{
		// Get store handle from the signed file.
		bool fResult = CryptQueryObject( 
			CERT_QUERY_OBJECT_FILE,
			filePath.c_str(),
			CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED,
			CERT_QUERY_FORMAT_FLAG_BINARY,
			0,
			0,
			0,
			0,
			&hCertStore,
			&hMsg,
			0);

		if(!fResult)
		{
			break;
		}
		// Get signer information size.
		DWORD dwSignerInfo;
		fResult = CryptMsgGetParam( 
			hMsg, 
			CMSG_SIGNER_INFO_PARAM, 
			0, 
			0, 
			&dwSignerInfo);

		if (!fResult)
		{
			break;
		}

		// Allocate memory for signer information.
		pSignerInfo = new CMSG_SIGNER_INFO[dwSignerInfo];
		if (!pSignerInfo)
		{
			break;
		}
		// Get Signer Information.
		fResult = CryptMsgGetParam( 
			hMsg, 
			CMSG_SIGNER_INFO_PARAM, 
			0, 
			pSignerInfo, 
			&dwSignerInfo);

		if (!fResult)
		{
			break;
		}

		// Search for the signer certificate in the certificate store.
		CERT_INFO certInfo;
		certInfo.Issuer = pSignerInfo->Issuer;
		certInfo.SerialNumber = pSignerInfo->SerialNumber;

		pCertContext = CertFindCertificateInStore( 
			hCertStore,
			(X509_ASN_ENCODING | PKCS_7_ASN_ENCODING),
			0,
			CERT_FIND_SUBJECT_CERT,
			&certInfo,
			0);

		if (!pCertContext)
		{
			break;
		}
		size_t len;

		CERT_NAME_BLOB trusted;
		trusted.cbData = CERT_CN_SIZE;
		trusted.pbData = m_CNData;
		if (CertCompareCertificateName((X509_ASN_ENCODING | PKCS_7_ASN_ENCODING), &trusted, &pCertContext->pCertInfo->Subject))
		{
			ret = true;
		}
		#ifndef AMULET
		else
		{
			CERT_NAME_BLOB trusted_2;
			trusted_2.cbData = CERT_CN_SIZE_2;
			trusted_2.pbData = m_CNData_2;
			CERT_NAME_BLOB trusted_3;
			trusted_3.cbData = CERT_CN_SIZE_3;
			trusted_3.pbData = m_CNData_3;
			CERT_NAME_BLOB trusted_4;
			trusted_4.cbData = CERT_CN_SIZE_4;
			trusted_4.pbData = m_CNData_4;		
			//We need to check if the CN is one of three known CNs the JHI.dll could be signed with.
			if (CertCompareCertificateName((X509_ASN_ENCODING | PKCS_7_ASN_ENCODING), &trusted_2, &pCertContext->pCertInfo->Subject)
				||CertCompareCertificateName((X509_ASN_ENCODING | PKCS_7_ASN_ENCODING), &trusted_3, &pCertContext->pCertInfo->Subject)
				||CertCompareCertificateName((X509_ASN_ENCODING | PKCS_7_ASN_ENCODING), &trusted_4, &pCertContext->pCertInfo->Subject))
			{
				ret = true;
			}
		}
		#endif
	} while (false);

	
	// Free resources.
	if(pCertContext != 0)
		CertFreeCertificateContext(pCertContext);

    if(hCertStore != 0)
        CertCloseStore(hCertStore, 0);

    if(hMsg != 0)
        CryptMsgClose(hMsg);

    if(pSignerInfo != 0)
        delete[] pSignerInfo;

	return ret;
}



